---
- name: "Check installed asdf plugins"
  ansible.builtin.command:
    cmd: "{{ asdf_bin }} plugin list"
  register: "asdf_plugin_list"
  changed_when: false

- name: "Install asdf plugin {{ item.plugin_name }}"
  ansible.builtin.command:
    cmd: "{{ asdf_bin }} plugin add {{ item.plugin_name }} {{ item.url | default('') }}"
  when: "item.plugin_name not in asdf_plugin_list.stdout.splitlines()"
  register: "asdf_plugin_install"
  changed_when: "asdf_plugin_install.rc == 0"

- name: "Get installed versions for {{ item.plugin_name }}"
  ansible.builtin.command:
    cmd: "{{ asdf_bin }} list {{ item.plugin_name }}"
  register: "asdf_installed_versions"
  changed_when: false
  failed_when: "asdf_installed_versions.rc != 0 and 'No compatible versions installed' not in asdf_installed_versions.stderr"

- name: "Debug variables"
  ansible.builtin.debug:
    msg:
      - "Version being checked: {{ item.version }}"
      - "Is 'latest' in version: {{ 'latest' in item.version }}"
      - "Installed versions: {{ asdf_installed_versions.stdout_lines }}"
      - "Is version not in installed: {{ item.version not in asdf_installed_versions.stdout.splitlines() }}"
  when: "ansible_verbosity > 0"

- name: "Install {{ item.plugin_name ~ ':' ~ item.version }}"
  ansible.builtin.command:
    cmd: "{{ asdf_bin }} install {{ item.plugin_name }} {{ item.version }}"
  when: "'latest' in item.version or item.version not in asdf_installed_versions.stdout.splitlines()"
  register: "asdf_install_output"
  changed_when: "'is already installed' not in asdf_install_output.stdout"

- name: "Set default version for {{ item.plugin_name ~ ':' ~ item.version }}"
  ansible.builtin.command:
    cmd: "{{ asdf_bin }} set --home {{ item.plugin_name }} {{ item.version }}"
  when: "'latest' in item.version or item.version not in asdf_installed_versions.stdout.splitlines()"
